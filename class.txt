class MyClass:
    x = 5
print(MyClass)

###############################################
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)
p1.myfunc()


# Write Python3 code here

class car():

  # init method or constructor
  def __init__(self, model, color):
    self.model = model
    self.color = color

  def show(self):
    print("Model is", self.model)
    print("color is", self.color)

  # both objects have different self which


# contain their attributes
audi = car("audi a4", "blue")
ferrari = car("ferrari 488", "green")

audi.show()  # same output as car.show(audi)
ferrari.show()  # same output as car.show(ferrari)

# Behind the scene, in every instance method
# call, python sends the instances also with
# that method call like car.show(audi)

# Write Python3 code here

class this_is_class:
  def show(in_place_of_self):
    print("we have used another "
          "parameter name in place of self")


object = this_is_class()
object.show()

class Person:
  def __init__(mysillyobject, name, age):
    mysillyobject.name = name
    mysillyobject.age = age

  def myfunc(abc):
    print("Hello my name is " + abc.name)

p1 = Person("John", 36)
p1.myfunc()

#############Modify Object Properties
class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age

  def myfunc(self):
    print("Hello my name is " + self.name)

p1 = Person("John", 36)

p1.age = 40

print(p1.age)

class Person:
  pass

# having an empty class definition like this, would raise an error without the pass statement